// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/todo.proto

package generated

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TodoItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TodoItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TodoItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TodoItemMultiError, or nil
// if none found.
func (m *TodoItem) ValidateAll() error {
	return m.validate(true)
}

func (m *TodoItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetTask()) < 1 {
		err := TodoItemValidationError{
			field:  "Task",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsCompleted

	if len(errors) > 0 {
		return TodoItemMultiError(errors)
	}

	return nil
}

// TodoItemMultiError is an error wrapping multiple validation errors returned
// by TodoItem.ValidateAll() if the designated constraints aren't met.
type TodoItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TodoItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TodoItemMultiError) AllErrors() []error { return m }

// TodoItemValidationError is the validation error returned by
// TodoItem.Validate if the designated constraints aren't met.
type TodoItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoItemValidationError) ErrorName() string { return "TodoItemValidationError" }

// Error satisfies the builtin error interface
func (e TodoItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodoItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoItemValidationError{}

// Validate checks the field values on TodoList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TodoList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TodoList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TodoListMultiError, or nil
// if none found.
func (m *TodoList) ValidateAll() error {
	return m.validate(true)
}

func (m *TodoList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TodoListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TodoListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TodoListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TodoListMultiError(errors)
	}

	return nil
}

// TodoListMultiError is an error wrapping multiple validation errors returned
// by TodoList.ValidateAll() if the designated constraints aren't met.
type TodoListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TodoListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TodoListMultiError) AllErrors() []error { return m }

// TodoListValidationError is the validation error returned by
// TodoList.Validate if the designated constraints aren't met.
type TodoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoListValidationError) ErrorName() string { return "TodoListValidationError" }

// Error satisfies the builtin error interface
func (e TodoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoListValidationError{}

// Validate checks the field values on UpdateTodoStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTodoStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTodoStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTodoStatusRequestMultiError, or nil if none found.
func (m *UpdateTodoStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTodoStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IsCompleted

	if len(errors) > 0 {
		return UpdateTodoStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateTodoStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTodoStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTodoStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTodoStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTodoStatusRequestMultiError) AllErrors() []error { return m }

// UpdateTodoStatusRequestValidationError is the validation error returned by
// UpdateTodoStatusRequest.Validate if the designated constraints aren't met.
type UpdateTodoStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoStatusRequestValidationError) ErrorName() string {
	return "UpdateTodoStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTodoStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoStatusRequestValidationError{}

// Validate checks the field values on UpdateTodoStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTodoStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTodoStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTodoStatusResponseMultiError, or nil if none found.
func (m *UpdateTodoStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTodoStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateTodoStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateTodoStatusResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTodoStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTodoStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTodoStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTodoStatusResponseMultiError) AllErrors() []error { return m }

// UpdateTodoStatusResponseValidationError is the validation error returned by
// UpdateTodoStatusResponse.Validate if the designated constraints aren't met.
type UpdateTodoStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoStatusResponseValidationError) ErrorName() string {
	return "UpdateTodoStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTodoStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoStatusResponseValidationError{}

// Validate checks the field values on DeleteTodoByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTodoByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTodoByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTodoByIdRequestMultiError, or nil if none found.
func (m *DeleteTodoByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTodoByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTodoByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteTodoByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTodoByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTodoByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTodoByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTodoByIdRequestMultiError) AllErrors() []error { return m }

// DeleteTodoByIdRequestValidationError is the validation error returned by
// DeleteTodoByIdRequest.Validate if the designated constraints aren't met.
type DeleteTodoByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTodoByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTodoByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTodoByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTodoByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTodoByIdRequestValidationError) ErrorName() string {
	return "DeleteTodoByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTodoByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTodoByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTodoByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTodoByIdRequestValidationError{}

// Validate checks the field values on DeleteTodoByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTodoByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTodoByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTodoByIdResponseMultiError, or nil if none found.
func (m *DeleteTodoByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTodoByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteTodoByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteTodoByIdResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTodoByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTodoByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTodoByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTodoByIdResponseMultiError) AllErrors() []error { return m }

// DeleteTodoByIdResponseValidationError is the validation error returned by
// DeleteTodoByIdResponse.Validate if the designated constraints aren't met.
type DeleteTodoByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTodoByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTodoByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTodoByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTodoByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTodoByIdResponseValidationError) ErrorName() string {
	return "DeleteTodoByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTodoByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTodoByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTodoByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTodoByIdResponseValidationError{}
