// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pkg/proto/todo.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TodoService_AddTodo_FullMethodName          = "/TodoService/AddTodo"
	TodoService_UpdateTodoStatus_FullMethodName = "/TodoService/UpdateTodoStatus"
	TodoService_DeleteTodoById_FullMethodName   = "/TodoService/DeleteTodoById"
	TodoService_GetTodoList_FullMethodName      = "/TodoService/GetTodoList"
)

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	AddTodo(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*TodoItem, error)
	UpdateTodoStatus(ctx context.Context, in *UpdateTodoStatusRequest, opts ...grpc.CallOption) (*UpdateTodoStatusResponse, error)
	DeleteTodoById(ctx context.Context, in *DeleteTodoByIdRequest, opts ...grpc.CallOption) (*DeleteTodoByIdResponse, error)
	GetTodoList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TodoList, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) AddTodo(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*TodoItem, error) {
	out := new(TodoItem)
	err := c.cc.Invoke(ctx, TodoService_AddTodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) UpdateTodoStatus(ctx context.Context, in *UpdateTodoStatusRequest, opts ...grpc.CallOption) (*UpdateTodoStatusResponse, error) {
	out := new(UpdateTodoStatusResponse)
	err := c.cc.Invoke(ctx, TodoService_UpdateTodoStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodoById(ctx context.Context, in *DeleteTodoByIdRequest, opts ...grpc.CallOption) (*DeleteTodoByIdResponse, error) {
	out := new(DeleteTodoByIdResponse)
	err := c.cc.Invoke(ctx, TodoService_DeleteTodoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TodoList, error) {
	out := new(TodoList)
	err := c.cc.Invoke(ctx, TodoService_GetTodoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations should embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	AddTodo(context.Context, *TodoItem) (*TodoItem, error)
	UpdateTodoStatus(context.Context, *UpdateTodoStatusRequest) (*UpdateTodoStatusResponse, error)
	DeleteTodoById(context.Context, *DeleteTodoByIdRequest) (*DeleteTodoByIdResponse, error)
	GetTodoList(context.Context, *emptypb.Empty) (*TodoList, error)
}

// UnimplementedTodoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) AddTodo(context.Context, *TodoItem) (*TodoItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTodo not implemented")
}
func (UnimplementedTodoServiceServer) UpdateTodoStatus(context.Context, *UpdateTodoStatusRequest) (*UpdateTodoStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoStatus not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodoById(context.Context, *DeleteTodoByIdRequest) (*DeleteTodoByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoById not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoList(context.Context, *emptypb.Empty) (*TodoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoList not implemented")
}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_AddTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).AddTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_AddTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).AddTodo(ctx, req.(*TodoItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_UpdateTodoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).UpdateTodoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_UpdateTodoStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).UpdateTodoStatus(ctx, req.(*UpdateTodoStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_DeleteTodoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodoById(ctx, req.(*DeleteTodoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetTodoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTodo",
			Handler:    _TodoService_AddTodo_Handler,
		},
		{
			MethodName: "UpdateTodoStatus",
			Handler:    _TodoService_UpdateTodoStatus_Handler,
		},
		{
			MethodName: "DeleteTodoById",
			Handler:    _TodoService_DeleteTodoById_Handler,
		},
		{
			MethodName: "GetTodoList",
			Handler:    _TodoService_GetTodoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/todo.proto",
}
